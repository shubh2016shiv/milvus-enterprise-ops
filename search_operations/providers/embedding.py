"""
Embedding Interface

This module provides a unified interface for embedding generation,
allowing the search operations to work with different embedding models.
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any, Union
from dataclasses import dataclass, field


@dataclass
class EmbeddingResult:
    """
    Result of an embedding generation operation.
    
    This class encapsulates the embedding vector(s) and metadata
    about the embedding generation process.
    """
    embedding: Union[List[float], List[List[float]]]
    dimension: int
    model_name: str
    processing_time_ms: float
    is_batch: bool = False
    metadata: Dict[str, Any] = field(default_factory=dict)


class EmbeddingProvider(ABC):
    """
    Abstract base class for embedding providers.
    
    This interface allows the search operations to work with
    different embedding models through a consistent API.
    """
    
    @abstractmethod
    async def generate_embedding(self, text: str) -> EmbeddingResult:
        """
        Generate embedding for a single text.
        
        Args:
            text: Text to generate embedding for
            
        Returns:
            EmbeddingResult with the generated embedding
            
        Raises:
            EmbeddingGenerationError: If embedding generation fails
        """
        pass
    
    @abstractmethod
    async def generate_embeddings(self, texts: List[str]) -> EmbeddingResult:
        """
        Generate embeddings for multiple texts.
        
        Args:
            texts: List of texts to generate embeddings for
            
        Returns:
            EmbeddingResult with the generated embeddings
            
        Raises:
            EmbeddingGenerationError: If embedding generation fails
        """
        pass
    
    @abstractmethod
    def get_dimension(self) -> int:
        """
        Get the dimension of the embeddings generated by this provider.
        
        Returns:
            Dimension of the embeddings
        """
        pass
    
    @abstractmethod
    def get_model_name(self) -> str:
        """
        Get the name of the embedding model.
        
        Returns:
            Name of the embedding model
        """
        pass

